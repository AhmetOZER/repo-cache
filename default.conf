# The upstream directive defining the backend/upstream repo hosts
# see http://nginx.org/en/docs/http/ngx_http_upstream_module.html
# There is a primary and a backup. You can have more than that.
# NGINX will try to load balance between them using a "weighted round-robin"
# algorithm.
# Most requests go to the primary, fewer to the rest.
# Error retries trickle down the server definitions. If the last errs,
# the result is passed on to the client.
# By default I found that if one is unreachable during startup, nginx will
# kaput leaving clues in the error log.

# The following directive configures the cache. Storage et all. You may want
# the storage location  at a mount point with a filesystem on separate storage
# device/backend to match.
# see http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_cache_path.
proxy_cache_path /var/repo_mirror # defines where the cache is stashed

        # defines cache path heirarchy (yaani num directory levels in cache)
        levels=1:2

        # defines name and size of zone where all cache keys and cache metadata are stashed.
        # Servers as a lookup for cached data
        keys_zone=repository_cache:50m

        # The cached data access timeout. Pkgs get nuked if no access in 14 days.
        inactive=14d

        # Cache size limit
        max_size=100g;

# Our no-name server block
server {
  # Keep our eyes peeled on port 80
  listen [::]:80;

  # Location directive for the /ubuntu path
  location /alpine {
    # our cache's root
    root /var/repo_mirror/index_data;

    # look for packages in the following order
    try_files $uri @ubuntu;
  }

  # Location directive for the named location defined above
  location @ubuntu {
    resolver [2606:4700:4700::1111];
    # map this to the upstream definition above
    proxy_pass http://dl-cdn.alpinelinux.org;

    # 14days of caching for http code 200 response content
    proxy_cache_valid 200 14d;

    # we set our "repository_cache" zone for caching
    proxy_cache repository_cache;

    # Use stale cached data in the error events defined
    proxy_cache_use_stale error timeout invalid_header updating;

    # pass request to next (backup) server in the error events defined
    proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
  }
}
